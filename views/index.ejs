<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice Chat Bot</title>
    <link rel="icon" href="/images/chat.png" type="image/png">
    <style>
        body {
            background: linear-gradient(to right, #80b7ff, #ffae70);
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .mobile-frame {
            width: 410px;
            /* iPhone 14 Pro Max width */
            height: 900px;
            /* iPhone 14 Pro Max height */
            border: 16px solid #000;
            border-radius: 36px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            background-color: #ffffff;
            position: relative;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .dynamic-island {
            position: absolute;
            width: 100%;
            height: 35px;
            background: #000;
            border-bottom: 1px solid #333;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #fff;
            font-size: 16px;
            z-index: 1;
            margin-bottom: 10px;
        }

        .dynamic-island::before {
            content: "";
            width: 140px;
            height: 6px;
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.3);
            /* position: absolute; */
            top: 50%;
            transform: translateY(-50%);
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100%;
            padding-top: 20px;
        }

        .chat-messages {
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            width: 94%;
            padding: 20px;
            border-bottom: 1px solid #ddd;
            overflow-y: auto;
            background-color: #ffffff;
            flex: 1;
            padding-bottom: 100px;
        }

        .chat-message {
            background-color: #e1f5fe;
            padding: 15px;
            border-radius: 10px;
            margin: 10px 0;
            max-width: 80%;
            position: relative;
            word-wrap: break-word;
        }

        .chat-message.user {
            align-self: flex-end;
            background-color: #71ddac;
            color: #ffffff;
        }

        .chat-message.bot {
            background-color: #94aae5;
            color: #ffffff;
        }

        .chat-message .time {
            display: flex;
            align-items: center;
            font-size: 0.8em;
            color: #555;
            margin-top: 5px;
        }

        .chat-message .time-icon {
            width: 12px;
            height: 12px;
            margin-right: 5px;
        }

        .controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #ffffff;
        }

        .mic-icon {
            cursor: pointer;
            margin-top: 10px;
            width: 38px;
            height: 45px;
        }

        .mic-icon.hidden {
            display: none;
        }

        .animation {
            display: none;
            margin-top: 20px;
        }

        .animation.active {
            display: block;
            width: 50px;
            height: 50px;
            background: url('https://i.pinimg.com/originals/77/fb/3f/77fb3fc7e95ac33999c0b05832920a44.gif') no-repeat center center;
            background-size: cover;
        }

        button {
            background-color: #94aae5;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 1em;
        }

        button:hover {
            background-color: #94aae5;
        }

        .restart-container {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: #ffffff;
            margin-right: 20px;
        }

        .restart-icon {
            cursor: pointer;
            margin-top: 10px;
        }

        .bottom-container {
            position: absolute;
            bottom: 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
            width: 100%;
            padding: 10px;
            background-color: #ffffff;
            border-top: 1px solid #ccc;
            box-shadow: 0 -5px 10px rgba(0, 0, 0, 0.1);
        }

        .switch {
            position: absolute;
            top: 10px;
            right: 20px;
            z-index: 1;
        }

        .switch input {
            display: none;
        }

        .slider {
            position: relative;
            display: inline-block;
            width: 40px;
            height: 20px;
            background-color: #ccc;
            border-radius: 20px;
            transition: 0.4s;
            cursor: pointer;
        }

        .slider:before {
            position: absolute;
            content: "";
            top: 0;
            left: 0;
            width: 20px;
            height: 20px;
            background-color: #fff;
            border-radius: 50%;
            transition: 0.4s;
        }

        input:checked+.slider {
            background-color: #2196F3;
        }

        input:checked+.slider:before {
            transform: translateX(20px);
        }

        .slider.round {
            border-radius: 20px;
        }

        .slider.round:before {
            border-radius: 50%;
        }

        .left-brand-image {
            width: 12%;
            height: 60px;
            margin-bottom: 20px;
            margin-top: -55rem;
            margin-right: 30rem;
        }

        .right-brand-image {
            width: 12%;
            height: 60px;
            margin-bottom: 20px;
            margin-top: -53rem;
            margin-left: 30rem;
        }
    </style>
</head>

<body>
    <!-- // brand image -->
    <img src="https://d1lm766r530csk.cloudfront.net/img/logo/logo1.webp" alt="Naxtre" class="left-brand-image" />
    <div class="mobile-frame">
        <div class="dynamic-island">
            <!-- <label class="switch" title="Talk to Gemini">
                <input type="checkbox" id="switch-input">
                <span class="slider round"></span>
            </label> -->
        </div>
        <div class="chat-container">
            <div class="chat-messages" id="chatMessages">
            </div>
            <div class="bottom-container">
                <div class="restart-container">
                    <img src="https://img.icons8.com/ios-glyphs/30/000000/play.png" alt="Restart" class="restart-icon"
                        onclick="processStart()" />
                    <div class="restart-label">Start</div>
                </div>
                <div class="controls">
                    <img src="https://tse2.mm.bing.net/th?id=OIP._pVmKO-E2XdN9K70TZzVpgHaKo&pid=Api&P=0&h=220" alt="Mic"
                        class="mic-icon" id="micIcon" onclick="toggleMicrophone()" />
                    <div id="animation" class="animation"></div>
                </div>
                <div class="restart-container">
                    <img src="https://img.icons8.com/ios-glyphs/30/000000/restart.png" alt="Restart"
                        class="restart-icon" onclick="restartChat()" />
                    <div class="restart-label">Restart</div>
                </div>
            </div>
        </div>
    </div>
    <img src="https://www.peoplesinsight.in/assets/img/logo/logo-dark5.png" alt="peopleInsight"
        class="right-brand-image" />

    <script>
        let recognition;
        let isRecording = false;
        let recognitionEndTimeout;
        let messageIndex = 0; // Keep track of the message index
        let talkToGeminiSwitch = false

        const apiEndpoint = 'https://node-nlp.onrender.com'
        // const apiEndpoint = 'http://localhost:5000'

        document.getElementById('switch-input').addEventListener('change', function () {
            // Perform some action when the switch is toggled
            talkToGeminiSwitch = !talkToGeminiSwitch
        });


        function appendMessage(text, sender) {
            const chatContainer = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('chat-message');
            messageDiv.classList.add(sender);
            messageDiv.textContent = text;
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight; // Scroll to the bottom
        }

        function playAudio(url) {
            const audio = new Audio(url);
            audio.play();
            audio.onended = function () {
                // Delete the audio file after it has been played
                fetch(`${apiEndpoint}/api/delete-audio`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ url })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            console.log('Audio file deleted successfully');
                        } else {
                            console.error('Failed to delete audio file');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                    });

                // Automatically start speech recognition after the audio ends
                startSpeechRecognition();
            };
        }

        function processStart() {
            fetch(`${apiEndpoint}/api/node-nlp`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messageIndex,
                    text: "प्रारंभ"
                })
            })
                .then(response => response.json())
                .then(data => {
                    appendMessage(data.transcription, 'bot');
                    if (data.audioUrl) {
                        playAudio(data.audioUrl);
                    } else {
                        startSpeechRecognition(); // Start speech recognition if there's no audio to play
                    }
                    document.getElementById('micIcon').classList.remove('hidden');
                    messageIndex++; // Increment the message index
                });
        }

        function toggleMicrophone() {
            if (isRecording) {
                stopSpeaking();
            } else {
                startSpeechRecognition();
            }
        }

        // function startSpeechRecognition() {
        //     if (!('webkitSpeechRecognition' in window)) {
        //         alert('Your browser does not support the Web Speech API');
        //         return;
        //     }

        //     recognition = new webkitSpeechRecognition();
        //     recognition.lang = 'hi-IN'; // Hindi language
        //     recognition.interimResults = false;
        //     recognition.maxAlternatives = 1;

        //     recognition.onresult = function (event) {
        //         const transcript = event.results[0][0].transcript;
        //         appendMessage(transcript, 'user');
        //         // Clear previous timeout if any
        //         clearTimeout(recognitionEndTimeout);
        //         recognitionEndTimeout = setTimeout(() => {
        //             fetch(`${apiEndpoint}/api/node-nlp`, {
        //                 method: 'POST',
        //                 headers: {
        //                     'Content-Type': 'application/json'
        //                 },
        //                 body: JSON.stringify({
        //                     messageIndex,
        //                     text: transcript
        //                 })
        //             })
        //                 .then(response => response.json())
        //                 .then(data => {
        //                     if (data.audioUrl === null) {
        //                         return messageIndex++
        //                     } else if (data.audioUrl) {
        //                         appendMessage(data.transcription, 'bot')
        //                         playAudio(data.audioUrl);
        //                     } else {
        //                         startSpeechRecognition(); // Start speech recognition if there's no audio to play
        //                     }
        //                     document.getElementById('micIcon').classList.remove('hidden');
        //                     messageIndex++
        //                 });
        //         }, 1000); // 1-second delay after the user stops speaking

        //         stopSpeaking();
        //     };

        //     recognition.onerror = function (event) {
        //         console.error('Speech recognition error:', event.error);
        //         document.getElementById('micIcon').classList.remove('hidden');
        //         document.getElementById('animation').classList.remove('active');
        //         isRecording = false;
        //     };

        //     recognition.onend = function () {
        //         if (isRecording) {
        //             // Restart recognition if it ends without error
        //             startSpeechRecognition();
        //         }
        //     };

        //     recognition.start();
        //     document.getElementById('animation').classList.add('active');
        //     isRecording = true;
        // }

        function startSpeechRecognition() {
            if (!('webkitSpeechRecognition' in window)) {
                alert('Your browser does not support the Web Speech API');
                return;
            }

            recognition = new webkitSpeechRecognition();
            recognition.lang = 'hi-IN'; // Hindi language
            recognition.interimResults = false;
            recognition.maxAlternatives = 1;

            recognition.onresult = function (event) {
                const transcript = event.results[0][0].transcript;
                appendMessage(transcript, 'user');
                // Clear previous timeout if any
                clearTimeout(recognitionEndTimeout);
                recognitionEndTimeout = setTimeout(() => {
                    fetchDataAndHandleResponse(messageIndex, transcript);
                }, 1000); // 1-second delay after the user stops speaking

                stopSpeaking();
            };

            recognition.onerror = function (event) {
                console.error('Speech recognition error:', event.error);
                document.getElementById('micIcon').classList.remove('hidden');
                document.getElementById('animation').classList.remove('active');
                isRecording = false;
            };

            recognition.onend = function () {
                if (isRecording) {
                    // Restart recognition if it ends without error
                    startSpeechRecognition();
                }
            };

            recognition.start();
            document.getElementById('animation').classList.add('active');
            isRecording = true;
        }

        function fetchDataAndHandleResponse(index, transcript) {
            fetch(`${apiEndpoint}/api/node-nlp`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    messageIndex: index,
                    text: transcript
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.audioUrl === null) {
                        // Call the API with the next messageIndex
                        fetchDataAndHandleResponse(index + 1, transcript);
                    } else if (data.transcription === "माफ करें! मैं समझ नहीं पा रही हूँ, कृपया पुनः प्रयास करें!") {
                        // Call the API with the same messageIndex if the transcription is the specified error message
                        startSpeechRecognition();
                    } else if (data.audioUrl) {
                        appendMessage(data.transcription, 'bot');
                        playAudio(data.audioUrl);
                        messageIndex++; // Increment index only after successfully playing the audio
                    } else {
                        playAudio(data.audioUrl);
                        startSpeechRecognition(); // Restart speech recognition if no audio to play
                        messageIndex++; // Increment index in the final else block
                    }
                    document.getElementById('micIcon').classList.remove('hidden');
                });
        }


        function geminiTalk(text) {
            fetch(`${apiEndpoint}/api/gemini`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ text })
            })
                .then(response => response.json())
                .then(data => {
                    appendMessage(data.transcription, 'bot');
                    if (data.audioUrl) {
                        playAudio(data.audioUrl);
                    } else {
                        startSpeechRecognition(); // Start speech recognition if there's no audio to play
                    }
                    document.getElementById('micIcon').classList.remove('hidden');
                });
        }

        function stopSpeaking() {
            if (isRecording) {
                recognition.stop();
                document.getElementById('micIcon').classList.remove('hidden');
                document.getElementById('animation').classList.remove('active');
                isRecording = false;
            }
        }

        function restartChat() {
            // Clear all messages from the chat container
            const chatContainer = document.getElementById('chatMessages');
            while (chatContainer.firstChild) {
                chatContainer.removeChild(chatContainer.firstChild);
            }
            // Optionally, add a new message indicating the chat has been restarted
            const restartMessage = document.createElement('div');
            restartMessage.classList.add('chat-message', 'bot');
            // restartMessage.textContent = 'Chat has been restarted. You can start a new conversation.';
            restartMessage.textContent = 'चैट को पुनः प्रारंभ कर दिया गया है। आप एक नई बातचीत शुरू कर सकते हैं।';
            chatContainer.appendChild(restartMessage);
            messageIndex = 0
        }
    </script>
</body>

</html>